/* History:© 2001 John Henry Thompson. All rights reserved.2001.07.17	jht	3x3 covolution effect. Inspired by PixelToy.*/#include "CCapturePane.h"#define CODE_INNER_LOOP \	/* leave image as random color trail */ \	capPix = sourceLinePtr[0] + sourceLinePtr[1] + sourceLinePtr[2];   \	diffwPix = (previousLinePtr[0] + previousLinePtr[1] + previousLinePtr[2]) - capPix;  \	if (diffwPix < -diffTolerance_x3 || diffwPix > diffTolerance_x3) \	{ \		/* There is  difference, some gray */ \		monitorLinePtr[0] = color_int[0]; \		monitorLinePtr[1] = color_int[1]; \		monitorLinePtr[2] = color_int[2]; \	} \#if 0// ---------------------------------------------------------------------------------void	CCapturePane::ComputeMotionTrailColor(){	int	capPix;	int diffwPix;#include "EffectsLoop1.inc"}#endif#if 1// ---------------------------------------------------------------------------------void	CCapturePane::ComputeCovMoTrailsColor(){	int	capPix;	int diffwPix;/* Define CODE_INNER_LOOP and include to generate code for motion effect.*/	const BitMap	*pSource; 	const BitMap	*pDest;	GrafPtr	myPort = GetMacPort();	PixMapHandle		pmapSourceHd;	PixMapHandle		pmapPreviousHd;	PixMapHandle		pmapMonitorHd;	int					hcount, vcount, width, height;	Rect				box;		UInt8*				sourcePtr; 	UInt8*				previousPtr; 	UInt8*				motionPtr; 		int					rowBytes;		UInt8*				sourceLinePtr;	UInt8*				previousLinePtr;	UInt8*				monitorLinePtr;	UInt8*				monitorLine2Ptr;		int					inside;	int					sum0, sum1, sum2;	int					covSumScale = convolutionFactor;		pmapSourceHd = GetGWorldPixMap(gwSourcePtr);	pmapPreviousHd = GetGWorldPixMap(gwPreviousPtr);	pmapMonitorHd = GetGWorldPixMap(gwMonitorPtr);		sourcePtr = (UInt8*)GetPixBaseAddr( pmapSourceHd );	previousPtr = (UInt8*)GetPixBaseAddr( pmapPreviousHd );	motionPtr = (UInt8*)GetPixBaseAddr( pmapMonitorHd );		rowBytes = (**pmapSourceHd).rowBytes & 0x3FFF;				box = (**pmapSourceHd).bounds;	width = box.right - box.left;	height = box.bottom - box.top;	// Inset by 1 pixel	height -= 2;	width -= 2;		sourcePtr += rowBytes;	previousPtr += rowBytes;	motionPtr += rowBytes;		//motionPtr += width*4;	// Point to just beyond end of line.	//motionPtr -= 4; // Inset by 1 pixel	motionPtr += 4;		for (vcount = height; 		vcount > 0; 		vcount--, sourcePtr += rowBytes, previousPtr += rowBytes, motionPtr += rowBytes)	{		sourceLinePtr = sourcePtr+1;		previousLinePtr = previousPtr+1;		//monitorLinePtr = motionPtr - 3;		monitorLinePtr = motionPtr+1;				inside = 0;				for (hcount =  width; 			hcount > 0; 			hcount--, sourceLinePtr+=4, previousLinePtr+=4, monitorLinePtr+=4)		{					// Compute 3x3 avg						// Previous Line			monitorLine2Ptr = monitorLinePtr - rowBytes;						sum0 = monitorLine2Ptr[0-4];			sum1 = monitorLine2Ptr[1-4];			sum2 = monitorLine2Ptr[2-4];						sum0 += monitorLine2Ptr[0];			sum1 += monitorLine2Ptr[1];			sum2 += monitorLine2Ptr[2];						sum0 += monitorLine2Ptr[0+4];			sum1 += monitorLine2Ptr[1+4];			sum2 += monitorLine2Ptr[2+4];						// Next Line			monitorLine2Ptr = monitorLinePtr + rowBytes;			sum0 += monitorLine2Ptr[0-4];			sum1 += monitorLine2Ptr[1-4];			sum2 += monitorLine2Ptr[2-4];						sum0 += monitorLine2Ptr[0];			sum1 += monitorLine2Ptr[1];			sum2 += monitorLine2Ptr[2];						sum0 += monitorLine2Ptr[0+4];			sum1 += monitorLine2Ptr[1+4];			sum2 += monitorLine2Ptr[2+4];			// Current Line			sum0 += monitorLinePtr[0-4];			sum1 += monitorLinePtr[1-4];			sum2 += monitorLinePtr[2-4];						sum0 += monitorLinePtr[0];			sum1 += monitorLinePtr[1];			sum2 += monitorLinePtr[2];						sum0 += monitorLinePtr[0+4];			sum1 += monitorLinePtr[1+4];			sum2 += monitorLinePtr[2+4];			// Replace current pixel with average of all 9 in 3x3 matrix			monitorLinePtr[0] = sum0/ covSumScale; 			monitorLinePtr[1] = sum1/ covSumScale; 			monitorLinePtr[2] = sum2/ covSumScale; 			{				/* leave image as random color trail */ 				capPix = sourceLinePtr[0] + sourceLinePtr[1] + sourceLinePtr[2];   				diffwPix = (previousLinePtr[0] + previousLinePtr[1] + previousLinePtr[2]) - capPix;  				if (diffwPix < -diffTolerance_x3 || diffwPix > diffTolerance_x3) 				{ 					/* There is  difference, show source */ 					#if 1					monitorLinePtr[0] = sourceLinePtr[0]; 					monitorLinePtr[1] = sourceLinePtr[1]; 					monitorLinePtr[2] = sourceLinePtr[2]; 					#endif					/* There is  difference, hit it with color */ 					#if 0					monitorLinePtr[0] = color_int[0]; 					monitorLinePtr[1] = color_int[1]; 					monitorLinePtr[2] = color_int[2]; 					#endif					// 					#if 0					monitorLinePtr[0] = 255; 					monitorLinePtr[1] = 0; 					monitorLinePtr[2] = 0; 					#endif				} 			}			/* Copy over for next diff */			previousLinePtr[0] = sourceLinePtr[0];			previousLinePtr[1] = sourceLinePtr[1];			previousLinePtr[2] = sourceLinePtr[2];		}	}	pSource = GetPortBitMapForCopyBits( gwMonitorPtr );	pDest = GetPortBitMapForCopyBits( myPort );	CopyBits( pSource, pDest, &captureRect, &drawRect, inkMode, 0);	gwLastOutput = gwMonitorPtr;}#endif