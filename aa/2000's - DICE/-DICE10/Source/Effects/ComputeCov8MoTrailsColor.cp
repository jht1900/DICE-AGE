/* History:© 2001 John Henry Thompson. All rights reserved.2001.07.17	jht	3x3 covolution effect. Inspired by PixelToy.*/#include "CCapturePane.h"#if 1// ---------------------------------------------------------------------------------void	CCapturePane::ComputeCov8MoTrailsColor(){	int	capPix;	int diffwPix;/* Define CODE_INNER_LOOP and include to generate code for motion effect.*/	const BitMap	*pSource; 	const BitMap	*pDest;	GrafPtr	myPort = GetMacPort();	PixMapHandle		pmapSourceHd;	PixMapHandle		pmapPreviousHd;	PixMapHandle		pmapMonitorHd;	int					hcount, vcount, width, height;	Rect				box;		UInt8*				sourcePtr; 	UInt8*				previousPtr; 	UInt8*				motionPtr; 		int					rowBytes;	int					rowBytesMonitor;		UInt8*				sourceLinePtr;	UInt8*				previousLinePtr;	UInt8*				monitorLinePtr;	UInt8*				monitorLine2Ptr;		int					inside;	int					sum0;	int					covSumScale = convolutionFactor;		pmapSourceHd = GetGWorldPixMap(gwSourcePtr);	pmapPreviousHd = GetGWorldPixMap(gwPreviousPtr);	pmapMonitorHd = GetGWorldPixMap(gwMonitor8Ptr);		sourcePtr = (UInt8*)GetPixBaseAddr( pmapSourceHd );	previousPtr = (UInt8*)GetPixBaseAddr( pmapPreviousHd );	motionPtr = (UInt8*)GetPixBaseAddr( pmapMonitorHd );		rowBytes = (**pmapSourceHd).rowBytes & 0x3FFF;	rowBytesMonitor = (**pmapMonitorHd).rowBytes & 0x3FFF;		box = (**pmapSourceHd).bounds;	width = box.right - box.left;	height = box.bottom - box.top;	// Inset by 1 pixel	height -= 2;	width -= 2;		sourcePtr += rowBytes;	previousPtr += rowBytes;	motionPtr += rowBytesMonitor;		//motionPtr += width;	// Point to just beyond end of line.	//motionPtr -= 1; // Inset by 1 pixel	motionPtr += 4;		for (vcount = height; 		vcount > 0; 		vcount--, sourcePtr += rowBytes, previousPtr += rowBytes, motionPtr += rowBytesMonitor)	{		sourceLinePtr = sourcePtr+1;		previousLinePtr = previousPtr+1;				monitorLinePtr = motionPtr - 0;				inside = 0;				for (hcount =  width; 			hcount > 0; 			hcount--, sourceLinePtr+=4, previousLinePtr+=4, monitorLinePtr += 1)		{					// Compute 3x3 avg						// Previous Line			monitorLine2Ptr = monitorLinePtr - rowBytesMonitor;						sum0 = monitorLine2Ptr[0-1];						sum0 += monitorLine2Ptr[0];						sum0 += monitorLine2Ptr[0+1];						// Next Line			monitorLine2Ptr = monitorLinePtr + rowBytesMonitor;			sum0 += monitorLine2Ptr[0-1];						sum0 += monitorLine2Ptr[0];						sum0 += monitorLine2Ptr[0+1];			// Current Line			sum0 += monitorLinePtr[0-1];						sum0 += monitorLinePtr[0];						sum0 += monitorLinePtr[0+1];			// Replace current pixel with average of all 9 in 3x3 matrix			monitorLinePtr[0] = sum0/ covSumScale; 			{				/* leave image as random color trail */ 				capPix = sourceLinePtr[0] + sourceLinePtr[1] + sourceLinePtr[2];   				diffwPix = (previousLinePtr[0] + previousLinePtr[1] + previousLinePtr[2]) - capPix;  				if (diffwPix < -diffTolerance_x3 || diffwPix > diffTolerance_x3) 				{ 					/* There is  difference, hit it with color */ 					#if 0					monitorLinePtr[0] = color_int[0]; 					#endif					// 					#if 1					monitorLinePtr[0] = 255; 					#endif				} 			}			/* Copy over for next diff */			previousLinePtr[0] = sourceLinePtr[0];			previousLinePtr[1] = sourceLinePtr[1];			previousLinePtr[2] = sourceLinePtr[2];		}	}	pSource = GetPortBitMapForCopyBits( gwMonitor8Ptr );	pDest = GetPortBitMapForCopyBits( myPort );	CopyBits( pSource, pDest, &captureRect, &drawRect, inkMode, 0);	gwLastOutput = gwMonitorPtr;}#endif