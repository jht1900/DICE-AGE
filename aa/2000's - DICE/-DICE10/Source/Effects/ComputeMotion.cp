/* History:© 2001 John Henry Thompson. All rights reserved2001.05.22	jht	Split off.*/#include "CCapturePane.h"// ---------------------------------------------------------------------------------void	CCapturePane::ComputeMotion(){	const BitMap	*pSource;	const BitMap	*pDest;	GrafPtr	myPort = GetMacPort();	PixMapHandle		pmapSourceHd;	PixMapHandle		pmapPreviousHd;	PixMapHandle		pmapMonitorHd;	int					hcount, vcount, width, height;	Rect				box;		UInt8*				sourcePtr; // source	UInt8*				previousPtr; // previous	UInt8*				motionPtr; // monitor		int					rowBytes;		UInt8*				sourceLinePtr;	UInt8*				previousLinePtr;	UInt8*				monitorLinePtr;		int					capPix, diffwPix;	int					inside;		int i;		pmapSourceHd = GetGWorldPixMap(gwSourcePtr);	pmapPreviousHd = GetGWorldPixMap(gwPreviousPtr);	pmapMonitorHd = GetGWorldPixMap(gwMonitorPtr);		sourcePtr = (UInt8*)GetPixBaseAddr( pmapSourceHd );	previousPtr = (UInt8*)GetPixBaseAddr( pmapPreviousHd );	motionPtr = (UInt8*)GetPixBaseAddr( pmapMonitorHd );		rowBytes = (**pmapSourceHd).rowBytes & 0x3FFF;				box = (**pmapSourceHd).bounds;	width = box.right - box.left;	height = box.bottom - box.top;	motionPtr += width*4;	for (vcount = height; 		vcount > 0; 		vcount--, sourcePtr += rowBytes, previousPtr += rowBytes, motionPtr += rowBytes)	{		sourceLinePtr = sourcePtr+1;		previousLinePtr = previousPtr+1;		monitorLinePtr = motionPtr - 3;				inside = 0;				for (hcount =  width; 			hcount > 0; 			hcount--, sourceLinePtr+=4, previousLinePtr+=4, monitorLinePtr-=4)		{			switch (effectNum)			{			case kEffectMotionDiff:				/* Show color diff, clamp black */				{					int i;					for (i = 0; i < 3; i++)					{						//diffwPix = previousLinePtr[i] - sourceLinePtr[i]; 						diffwPix = sourceLinePtr[i] - previousLinePtr[i]; 						if (diffwPix < 0)							diffwPix = 0;						monitorLinePtr[i] = diffwPix;					}				}				break;			case kEffectMotionMoWhite:				capPix = sourceLinePtr[0] + sourceLinePtr[1] + sourceLinePtr[2];  				diffwPix = (previousLinePtr[0] + previousLinePtr[1] + previousLinePtr[2]) - capPix; 				if (diffwPix < -diffTolerance*3 || diffwPix > diffTolerance*3)				{					/* There is  difference show white */					monitorLinePtr[0] = monitorLinePtr[1] = monitorLinePtr[2] = 255;				}				else				{					/* No diff, show black */					monitorLinePtr[0] = monitorLinePtr[1] = monitorLinePtr[2] = 0;				}				break;			case kEffectMotionMoBlack:				capPix = sourceLinePtr[0] + sourceLinePtr[1] + sourceLinePtr[2];  				diffwPix = (previousLinePtr[0] + previousLinePtr[1] + previousLinePtr[2]) - capPix; 				if (diffwPix < -diffTolerance*3 || diffwPix > diffTolerance*3)				{					/* There is  difference show black */					monitorLinePtr[0] = monitorLinePtr[1] = monitorLinePtr[2] = 0;				}				else				{					/* No diff, show white */					monitorLinePtr[0] = monitorLinePtr[1] = monitorLinePtr[2] = 255;				}				break;							case kEffectMotionNoMoBlack:				capPix = sourceLinePtr[0] + sourceLinePtr[1] + sourceLinePtr[2];  				diffwPix = (previousLinePtr[0] + previousLinePtr[1] + previousLinePtr[2]) - capPix; 				if (diffwPix < -diffTolerance*3 || diffwPix > diffTolerance*3)				{					/* There is  difference, show image */					monitorLinePtr[0] = sourceLinePtr[0];					monitorLinePtr[1] = sourceLinePtr[1];					monitorLinePtr[2] = sourceLinePtr[2];				}				else				{					/* No diff, show black */					monitorLinePtr[0] = monitorLinePtr[1] = monitorLinePtr[2] = 0;				}				break;			case kEffectMotionTrailWhite:				/* leave image as trail */				capPix = sourceLinePtr[0] + sourceLinePtr[1] + sourceLinePtr[2];  				diffwPix = (previousLinePtr[0] + previousLinePtr[1] + previousLinePtr[2]) - capPix; 				if (diffwPix < -diffTolerance*3 || diffwPix > diffTolerance*3)				{					/* There is  difference, show white */					monitorLinePtr[0] = monitorLinePtr[1] = monitorLinePtr[2] = 255;				}				else				{					/* No diff, show black */					//monitorLinePtr[0] = monitorLinePtr[1] = monitorLinePtr[2] = 0;				}				break;						case kEffectMotionTrailImage:				/* leave image as trail */				capPix = sourceLinePtr[0] + sourceLinePtr[1] + sourceLinePtr[2];  				diffwPix = (previousLinePtr[0] + previousLinePtr[1] + previousLinePtr[2]) - capPix; 				if (diffwPix < -diffTolerance*3 || diffwPix > diffTolerance*3)				{					/* There is  difference, show image */						monitorLinePtr[0] = sourceLinePtr[0];						monitorLinePtr[1] = sourceLinePtr[1];						monitorLinePtr[2] = sourceLinePtr[2];				}				else				{					/* No diff, show black */					//monitorLinePtr[0] = monitorLinePtr[1] = monitorLinePtr[2] = 0;				}				break;							case kEffectMotionTrailColor:				/* leave image as random color trail */				capPix = sourceLinePtr[0] + sourceLinePtr[1] + sourceLinePtr[2];  				diffwPix = (previousLinePtr[0] + previousLinePtr[1] + previousLinePtr[2]) - capPix; 				if (diffwPix < -diffTolerance*3 || diffwPix > diffTolerance*3)				{					/* There is  difference, some gray */					monitorLinePtr[0] = color[0];					monitorLinePtr[1] = color[1];					monitorLinePtr[2] = color[2];					//monitorLinePtr[1] = ranGre;					//monitorLinePtr[2] = ranBlu;				}				else				{					/* No diff, show black */					//monitorLinePtr[0] = monitorLinePtr[1] = monitorLinePtr[2] = 0;				}				break;						case kEffectMotionClampWhite:				/* Show color diff, clamp white */				{					for (i = 0; i < 3; i++)					{						diffwPix = previousLinePtr[i] - sourceLinePtr[i]; 						if (diffwPix < 0)							diffwPix = 255;						monitorLinePtr[i] = diffwPix;					}				}				break;			case kEffectMotionClampMax:				/* Show color diff, max color clamp */				{					int i;					for (i = 0; i < 3; i++)					{						diffwPix = previousLinePtr[i] - sourceLinePtr[i]; 						if (diffwPix < 0)							diffwPix = sourceLinePtr[i] ;						monitorLinePtr[i] = diffwPix;					}				}				break;			case kEffectMotionDiffGray:				/* Show gray diff */				capPix = sourceLinePtr[0] + sourceLinePtr[1] + sourceLinePtr[2];  				diffwPix = (previousLinePtr[0] + previousLinePtr[1] + previousLinePtr[2]) - capPix; 				if (diffwPix < 0)					diffwPix = 0;				monitorLinePtr[0] = monitorLinePtr[1] = monitorLinePtr[2] = (diffwPix/3);				//monitorLinePtr[0] = monitorLinePtr[1] = monitorLinePtr[2] = (capPix/3);				break;										case kEffectMotionStreak:				/* Show line streak on change */				{					capPix = sourceLinePtr[0] + sourceLinePtr[1] + sourceLinePtr[2];  					diffwPix = (previousLinePtr[0] + previousLinePtr[1] + previousLinePtr[2]) - capPix; 					if (diffwPix < -diffTolerance*3 || diffwPix > diffTolerance*3)					{						/* There is  difference */						inside = ! inside;					}					if (inside)					{						/* Show image */						monitorLinePtr[0] = sourceLinePtr[0];						monitorLinePtr[1] = sourceLinePtr[1];						monitorLinePtr[2] = sourceLinePtr[2];					}					else					{						/* No diff, show black */						monitorLinePtr[0] = monitorLinePtr[1] = monitorLinePtr[2] = 0;					}				}				break;						case kEffectMotionStreakColor:				/* Show line streak on change */				{					capPix = sourceLinePtr[0] + sourceLinePtr[1] + sourceLinePtr[2];  					diffwPix = (previousLinePtr[0] + previousLinePtr[1] + previousLinePtr[2]) - capPix; 					if (diffwPix < -diffTolerance*3 || diffwPix > diffTolerance*3)					{						/* There is  difference */						inside = ! inside;					}					if (inside)					{						/* Show image */						monitorLinePtr[0] = color[0];						monitorLinePtr[1] = color[1];						monitorLinePtr[2] = color[2];					}					else					{						/* No diff, show black */						monitorLinePtr[0] = monitorLinePtr[1] = monitorLinePtr[2] = 0;					}				}				break;			case kEffectMotionStreakColorTrail:				/* Show line streak on change */				{					capPix = sourceLinePtr[0] + sourceLinePtr[1] + sourceLinePtr[2];  					diffwPix = (previousLinePtr[0] + previousLinePtr[1] + previousLinePtr[2]) - capPix; 					if (diffwPix < -diffTolerance*3 || diffwPix > diffTolerance*3)					{						/* There is  difference */						inside = ! inside;					}					if (inside)					{						/* Show image color */						monitorLinePtr[0] = color[0];						monitorLinePtr[1] = color[1];						monitorLinePtr[2] = color[2];					}				}				break;			}			/* Copy over for next diff */			previousLinePtr[0] = sourceLinePtr[0];			previousLinePtr[1] = sourceLinePtr[1];			previousLinePtr[2] = sourceLinePtr[2];		}	}	/* Draw monitor image */	pSource = GetPortBitMapForCopyBits( gwMonitorPtr );	pDest = GetPortBitMapForCopyBits( myPort );	CopyBits( pSource, pDest, &captureRect, &drawRect, inkMode, 0);}