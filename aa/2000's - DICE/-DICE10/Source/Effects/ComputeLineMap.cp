/* History:© 2001 John Henry Thompson. All rights reserved2001.05.22	jht	Split off.*/#include "CCapturePane.h"// ---------------------------------------------------------------------------------void	CCapturePane::ComputeLineMap(){	const BitMap	*pSource; 	const BitMap	*pDest;	GrafPtr	myPort = GetMacPort();	PixMapHandle		pmapSourceHd;	PixMapHandle		pmapMonitorHd;	int					hcount, vcount, width, height;	Rect				box;		UInt32*				sourcePtr; 	UInt32*				monitorPtr; 		int					rowBytes;		pmapSourceHd = GetGWorldPixMap(gwSourcePtr);	pmapMonitorHd = GetGWorldPixMap(gwMonitorPtr);		sourcePtr = (UInt32*)GetPixBaseAddr( pmapSourceHd );	monitorPtr = (UInt32*)GetPixBaseAddr( pmapMonitorHd );		rowBytes = (**pmapSourceHd).rowBytes & 0x3FFF;	rowBytes = rowBytes / 4;		box = (**pmapSourceHd).bounds;	width = box.right - box.left;	height = box.bottom - box.top;	for (vcount = height; 		vcount > 0; 		vcount--, sourcePtr += rowBytes, monitorPtr += rowBytes)	{				for (hcount =  0; 			hcount < width; 			hcount++ )		{			/* Map pixel in line */			monitorPtr[ hcount ] = sourcePtr[ lineMap[hcount] ];		}	}	pSource = GetPortBitMapForCopyBits( gwMonitorPtr );	pDest = GetPortBitMapForCopyBits( myPort );	CopyBits( pSource, pDest, &captureRect, &drawRect, inkMode, 0);		gwLastOutput = gwMonitorPtr;	/* Compute next mapping */	{		int i;		int		*tempLineMap;				mapIndex++;		for (i = 0; i < width; i++)		{			lineMap[i] = lineMapStart[i] + (lineMapDest[i] - lineMapStart[i]) * mapIndex / mapCount ;		}		if (mapIndex >= mapCount)		{			mapIndex = 0;			mapDirection = ~mapDirection;			/* Exchange start and dest mappings, so we bounce in the other direction */			tempLineMap = lineMapDest;			lineMapDest = lineMapStart;			lineMapStart = tempLineMap;		}	}}