// ===========================================================================//	CNoteWind.cp	// ===========================================================================/* --- History:2003.03.11 	jht		Created.*/#include "CNoteWind.h"#include "CNoteWindResDef.h"#include "ResDef.h"#include "CCapturePane.h"#include <stdio.h>#include <string.h>// --------------------------------------------------------------------------------CNoteWind::CNoteWind(LStream *inStream)	: CPermWind(inStream){	//UReanimator::LinkListenerToBroadcasters( this, this, PPob_NoteWindow);	//UReanimator::LinkListenerToControls( this, this, PPob_NoteWindow);			// CNotePlayer(int instrumentNum, int polyphonyNum, double polyphonyHint)	this->notePlayer = new CNotePlayer( 1, kNumMultiNotes, kNumMultiNotes);	this->oldknum = -1;	this->noteNumText = 0;		this->velocity = 80;		this->noteNumText = 0;		this->instrNameText = 0;		this->instrNumText = 0;}// --------------------------------------------------------------------------------CNoteWind::~CNoteWind(){	// nothing special	delete notePlayer;}			// --------------------------------------------------------------------------------void CNoteWind::FinishCreateSelf(){	UReanimator::LinkListenerToBroadcasters( this, this, PPob_NoteWindow);	StartIdling();		// Setup for SpendTime}// --------------------------------------------------------------------------------void			CNoteWind::DrawSelf(){	LWindow::DrawSelf();}// --------------------------------------------------------------------------------void	CNoteWind::ListenToMessage(MessageT inMessage, void *ioParam){	int		num;	num = 0;	ioParam;		switch (inMessage)	{		#if 0		case kNote_TestButton_Msg:			//			//::SysBeep( 0 );			if (this->notePlayer)			{				// Play(int pitchNum, int velocityNum)				this->notePlayer->Play( 80, this->velocity);			}			break;		#endif				case kNote_InstSlider:			num = *(SInt32*)ioParam;			this->SelectInstrumentNum( num );			break;					case kNote_VelocitySlider:			this->velocity = *(SInt32*)ioParam;						if (this->oldknum >= 0)			{				this->notePlayer->Play( this->oldknum, this->velocity);			}			break;					case kNote_Pick:			num = this->notePlayer->PickInstrument();			this->SelectInstrumentNum( num );			break;	}}// --------------------------------------------------------------------------------voidCNoteWind::SelectInstrumentNum(int instrumentNum){	this->notePlayer->SetInstrument( instrumentNum);		if (! this->instrNameText)	{		this->instrNameText = dynamic_cast <LStaticText *>( this->FindPaneByID( kNote_InstNameText ) );	}	if (! this->instrNumText)	{		this->instrNumText = dynamic_cast <LStaticText *>( this->FindPaneByID( kNote_InstNameTextNum ) );	}		if (this->instrNameText)	{		Str255	instrName;				this->notePlayer->GetInstrumentName(instrName);				this->instrNameText->SetText(  (Ptr)instrName + 1, instrName[0] );			}		if (this->instrNumText)	{		char	buf[200];				sprintf( buf, "%d",  instrumentNum );				this->instrNumText->SetText(  buf, strlen(buf) );	}}// --------------------------------------------------------------------------------// return -1 or key down numberint CNoteWind::GetKeyNum(){	//KeyMap		keyMap;	UInt32		iw;	UInt32		imask;	int			i;	int			j;	UInt8		*keyp;		GetKeys(keyMap);		keyp = (UInt8*)&keyMap;	for (i = 0; i < 16; i++)	{		iw = keyp[i];		if (iw == 0)			continue;		for (j = 0, imask = 1; j < 8; j++, imask <<= 1)		{			if ( (iw & imask) != 0)			{				return i*8 + j;			}		}	}		return -1;}// --------------------------------------------------------------------------------// return -1 or key down numberint CNoteWind::GetKeyNum32(){	//KeyMap		keyMap;	UInt32		iw;	UInt32		imask;	int			i;	int			j;		GetKeys(keyMap);		for (i = 0; i < 4; i++)	{		iw = keyMap[i];		if (iw == 0)			continue;		for (j = 0, imask = 1; j < 32; j++, imask <<= 1)		{			if ( (iw & imask) != 0)			{				return i*32 + j;			}		}	}		return -1;}#if 0// --------------------------------------------------------------------------------voidCNoteWind::SpendTime(	const EventRecord&	/* inMacEvent */){	int		knum;		this->notePlayer->Task();		//knum = GetKeyNum();	knum = GetKeyNum32();	if (knum >= 0)	{		if (knum != this->oldknum)		{			if (this->oldknum >= 0)				this->notePlayer->Play( this->oldknum, 0);							this->notePlayer->Play( knum, this->velocity);			this->oldknum = knum;		}	}	else	{		if (this->oldknum >= 0)			this->notePlayer->Play( this->oldknum, 0);		this->oldknum = -1;	}	//if (this->oldknum != -1)	{		this->ShowNote(knum);	}}#endif// --------------------------------------------------------------------------------voidCNoteWind::SpendTime(	const EventRecord&	/* inMacEvent */){	ProcessNotes();	}// --------------------------------------------------------------------------------voidCNoteWind::ProcessOneKeyNum(int keyNum){	int	newInst;		switch (keyNum)	{		case kKeyUpCode:			newInst = this->notePlayer->GetInstrument();			newInst++;			if (newInst > 127)			{				newInst = 0;			}			SelectInstrumentNum( newInst);			break;		case kKeyDownCode:			newInst = this->notePlayer->GetInstrument();			newInst--;			if (newInst < 0)			{				newInst = 127;			}			SelectInstrumentNum( newInst);			break;	}}// --------------------------------------------------------------------------------voidCNoteWind::ProcessNotes(){	int			knum = -1;	KeyMap		newKeyMap;		return;		this->notePlayer->Task();		UInt32		iw, newWord;	UInt32		imask;	int			i;	int			j;		GetKeys(newKeyMap);		for (i = 0; i < 4; i++)	{		newWord = newKeyMap[i];		iw = keyMap[i] ^ newWord;		keyMap[i] = newWord;		if (iw == 0)			continue;		for (j = 0, imask = 1; j < 32; j++, imask <<= 1)		{			if ( (iw & imask) != 0)			{				knum = i*32 + j;				if (newWord & imask)				{					this->notePlayer->Play( knum, this->velocity);					oldknum = knum;					ProcessOneKeyNum( knum);				}				else				{					this->notePlayer->Play( knum, 0);				}			}		}	}	this->ShowNote(oldknum);}// --------------------------------------------------------------------------------voidCNoteWind::ShowNote(int note ){	if (! this->noteNumText)	{		this->noteNumText = dynamic_cast <LStaticText *>( this->FindPaneByID( kNote_NoteNumText ) );	}	if (this->noteNumText)	{		char	buf[200];				sprintf( buf, "%d %08lx %08lx %08lx %08lx",  			note, keyMap[0], keyMap[1], keyMap[2], keyMap[3] );				this->noteNumText->SetText(  buf, strlen(buf) );	}}// ---------------------------------------------------------------------------------Boolean		CNoteWind::HandleKeyPress(const EventRecord	&inKeyEvent){	Boolean	result = FALSE;		SpendTime( inKeyEvent );		return result;}#if 0// --------------------------------------------------------------------------------voidCNoteWind::XXX(void){}#endif// --------------------------------------------------------------------------------// --------------------------------------------------------------------------------