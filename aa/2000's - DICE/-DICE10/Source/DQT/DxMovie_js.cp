// --------------------------------------------------------------------------------//// QuickTime Movie player//// 2005.03.01 	jht		Created.//// Copyright (c) 2005 John Henry Thompson. All rights reserved.// --------------------------------------------------------------------------------#include "DxMovie_js.h"#include "DxMovie.h"#include "dsGeneric.h"#include "jscntxt.h"#include "jslock.h"#include "dicejs.h"// --------------------------------------------------------------------------------#define DS_CLASS_NAME "Movie"#define DS_TYPE DxMovie#define DS_GET_PRIVATE ds_##DS_TYPE##_GetPrivate// --------------------------------------------------------------------------------static JSBoolds_getProperty(JSContext *cx, JSObject *obj, jsval id, jsval *vp);static JSBoolds_setProperty(JSContext *cx, JSObject *obj, jsval id, jsval *vp);// --------------------------------------------------------------------------------static JSBoolds_OpenFile(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);static JSBoolds_PickFile(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);static JSBoolds_Stop(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);static JSBoolds_Play(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);static JSBoolds_GoFirstFrame(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);static JSBoolds_GoNextFrame(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);static JSBoolds_GoPreviousFrame(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);// --------------------------------------------------------------------------------static JSFunctionSpec ds_methods[] = {    {"process",				ds_Generic_process,            0,0,0},    {"openFile",			ds_OpenFile,            0,0,0},    {"pickFile",			ds_PickFile,            0,0,0},    {"stop",				ds_Stop,            0,0,0},    {"play",				ds_Play,            0,0,0},    {"goFirstFrame",		ds_GoFirstFrame,            0,0,0},    {"goNextFrame",			ds_GoNextFrame,            0,0,0},    {"goPreviousFrame",		ds_GoPreviousFrame,            0,0,0},    {0,0,0,0,0}};enum ds_tinyid {    DS_PROP_output,    DS_PROP_frameCount,    DS_PROP_currentTime,    DS_PROP_timeScale,    DS_PROP_WIDTH,    DS_PROP_HEIGHT,    DS_PROP_DURATION,    DS_XXX_PROP};// --------------------------------------------------------------------------------static JSPropertySpec ds_props[] = {    {"output",				DS_PROP_output,		JSPROP_ENUMERATE|JSPROP_PERMANENT,0,0},    {"frameCount",			DS_PROP_frameCount,		JSPROP_ENUMERATE|JSPROP_PERMANENT,0,0},    {"currentTime",			DS_PROP_currentTime,		JSPROP_ENUMERATE|JSPROP_PERMANENT,0,0},    {"timeScale",			DS_PROP_timeScale,		JSPROP_ENUMERATE|JSPROP_PERMANENT,0,0},    {"width",			DS_PROP_WIDTH,		JSPROP_ENUMERATE|JSPROP_PERMANENT,0,0},    {"height",			DS_PROP_HEIGHT,		JSPROP_ENUMERATE|JSPROP_PERMANENT,0,0},    {"duration",		DS_PROP_DURATION,		JSPROP_ENUMERATE|JSPROP_PERMANENT,0,0},        {0,0,0,0,0}};// --------------------------------------------------------------------------------static JSClass ds_Class = {    DS_CLASS_NAME,    JSCLASS_HAS_PRIVATE,    JS_PropertyStub,  JS_PropertyStub,  ds_getProperty, 	ds_setProperty,    JS_EnumerateStub, JS_ResolveStub,   JS_ConvertStub,     ds_GenericFinalize,    JSCLASS_NO_OPTIONAL_MEMBERS};// --------------------------------------------------------------------------------static DS_TYPE *DS_GET_PRIVATE(JSContext *cx, JSObject *obj, jsval *argv){	return (DS_TYPE*) JS_GetInstancePrivate(cx, obj, &ds_Class, argv );}// --------------------------------------------------------------------------------#define DEF_FUNC(FuncName) \static JSBool \ds_##FuncName(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) \{ \    DS_TYPE 	*ucontrol; \	ucontrol =  DS_GET_PRIVATE(cx, obj, argv); \	if (! ucontrol) \		return JS_FALSE;  \	ucontrol->FuncName(); \	return JS_TRUE; \}DEF_FUNC(PickFile)DEF_FUNC(Stop)DEF_FUNC(Play)DEF_FUNC(GoFirstFrame)DEF_FUNC(GoNextFrame)DEF_FUNC(GoPreviousFrame)// --------------------------------------------------------------------------------static JSBool ds_OpenFile(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval) {     DS_TYPE 	*ucontrol;     JSString	*path;    JSBool 		ok;    ok = JS_ConvertArguments(cx, argc, argv, "S", &path);    if (! ok)    	goto exit;	ucontrol =  DS_GET_PRIVATE(cx, obj, argv); 	if (! ucontrol) 		return JS_FALSE;  	ucontrol->OpenFile(path); exit:;	return ok; }// --------------------------------------------------------------------------------// Movie()// mov.pick() -- present file picker// mov.output//static JSBoolds_Constructor(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval){    JSBool 				ok;	int32				width = 640, height = 480;	int32				inputNum = 1;	DS_TYPE			*ucontrol;		    if (!(cx->fp->flags & JSFRAME_CONSTRUCTING))     {		obj = js_NewObject(cx, &ds_Class, NULL, NULL);		if (!obj)		    return JS_FALSE;		*rval = OBJECT_TO_JSVAL(obj);    }    ucontrol = new DxMovie( obj );    if (! ucontrol)    {    	ok = JS_FALSE;    	goto exit;    }        ok = JS_SetPrivate(cx, obj, ucontrol);  exit:;    return ok;}// --------------------------------------------------------------------------------static JSBoolds_accessProperty(JSContext *cx, JSBool doSet, JSObject *obj, jsval id, jsval *vp){    JSBool 			ok = JS_FALSE;    jsint 			slot;    DS_TYPE 	*ucontrol;	// !!@ why return ok here??    if (!JSVAL_IS_INT(id))		return JS_TRUE;		    slot = JSVAL_TO_INT(id);		    JS_LOCK_OBJ(cx, obj);    	ucontrol = (DS_TYPE*) JS_GetPrivate(cx, obj);	if (! ucontrol)		goto exit;		    switch (slot)    {	   	case DS_PROP_output:    	{    		if (doSet)    		{    			GWorldPtr	newGWorldPtr;    			    			newGWorldPtr = (GWorldPtr)ds_GenericGetProp( cx, *vp,    												kDxProp_value, kDxType_CGrafPortPtr);    						ucontrol->SetGWorldPtr(newGWorldPtr );    		}    		else    		{    			// !!@ no get yet    		}    		break;    	}	    case DS_PROP_frameCount:	    {			jsdouble			num;			    		if (doSet)    		{	    		if (!JS_ValueToNumber(cx, *vp, &num))		    		goto exit;	    		//ucontrol->SetDelay( num );	    		// !!@ no set    		}    		else    		{    			ok = JS_NewNumberValue(cx, ucontrol->GetFrameCount(), vp);    		}    		break;	    }		case DS_PROP_currentTime:		{			jsdouble			num;			    		if (doSet)    		{	    		if (!JS_ValueToNumber(cx, *vp, &num))		    		goto exit;	    		//ucontrol->SetDelay( num );	    		// !!@ no set    		}    		else    		{    			ok = JS_NewNumberValue(cx, ucontrol->GetCurrentTime(), vp);    		}    		break;		}		case DS_PROP_timeScale:		{			jsdouble			num;    		if (doSet)    		{	    		if (!JS_ValueToNumber(cx, *vp, &num))		    		goto exit;	    		//ucontrol->SetDelay( num );	    		// !!@ no set    		}    		else    		{    			ok = JS_NewNumberValue(cx, ucontrol->GetTimeScale(), vp);    		}    		break;		}    	case DS_PROP_WIDTH:    	{			jsdouble			num;    		if (doSet)    		{    		}    		else    		{    			num = ucontrol->GetWidth();    			ok = JS_NewNumberValue(cx, num, vp);    		}    		break;    	}    	case DS_PROP_HEIGHT:    	{			jsdouble			num;    		if (doSet)    		{    		}    		else    		{    			num = ucontrol->GetHeight();    			ok = JS_NewNumberValue(cx, num, vp);    		}    		break;    	}    	case DS_PROP_DURATION:    	{			jsdouble			num;    		if (doSet)    		{    		}    		else    		{    			num = ucontrol->GetDuration();    			ok = JS_NewNumberValue(cx, num, vp);    		}    		break;    	}		    }    ok = JS_TRUE;exit:;    JS_UNLOCK_OBJ(cx, obj);    return ok;}// --------------------------------------------------------------------------------static JSBoolds_getProperty(JSContext *cx, JSObject *obj, jsval id, jsval *vp){	return ds_accessProperty( cx, FALSE/*doSet*/, obj, id, vp );}// --------------------------------------------------------------------------------static JSBoolds_setProperty(JSContext *cx, JSObject *obj, jsval id, jsval *vp){	return ds_accessProperty( cx, TRUE/*doSet*/, obj, id, vp );}// --------------------------------------------------------------------------------JSObject *ds_Movie_InitClass(JSContext *cx, JSObject *obj){    JSObject *proto;    proto = JS_InitClass(cx, obj, NULL, &ds_Class, ds_Constructor, 0,			 ds_props, ds_methods,			 NULL /* static_props*/, NULL /* static_method*/);    return proto;}// --------------------------------------------------------------------------------// --------------------------------------------------------------------------------