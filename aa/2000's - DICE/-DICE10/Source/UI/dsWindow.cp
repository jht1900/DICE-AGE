/* JavaScript wrapper for note playerCopyright (c) 2003 John Henry Thompson. All rights reserved.History:2003.03.20	jht	Created. Integrating JavaScript.*/#include "dsWindow.h"#include "DUWindow.h"#include "dsDOM.h"#include "jscntxt.h"#include "jslock.h"#define DS_CLASS_NAME_UI "Window"// --------------------------------------------------------------------------------static JSBoolds_getProperty(JSContext *cx, JSObject *obj, jsval id, jsval *vp);static JSBoolds_setProperty(JSContext *cx, JSObject *obj, jsval id, jsval *vp);static voidds_finalize(JSContext *cx, JSObject *obj);static JSBoolds_Select(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);static JSBoolds_Show(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);static JSBoolds_Hide(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);// --------------------------------------------------------------------------------static JSFunctionSpec ds_methods[] = {    {"select",            ds_Select,            0,0,0},    {"show",            ds_Show,            0,0,0},    {"hide",            ds_Hide,            0,0,0},    {0,0,0,0,0}};enum ds_tinyid {    DS_VISIBLE_PROP,    DS_ENABLED_PROP,    DS_TITLE_PROP,    DS_XXX_PROP};// --------------------------------------------------------------------------------static JSPropertySpec ds_props[] = {    {"visible",		DS_VISIBLE_PROP,		JSPROP_ENUMERATE|JSPROP_PERMANENT,0,0},    {"enabled",		DS_ENABLED_PROP,		JSPROP_ENUMERATE|JSPROP_PERMANENT,0,0},    {"title",		DS_TITLE_PROP,			JSPROP_ENUMERATE|JSPROP_PERMANENT,0,0},    {0,0,0,0,0}};// --------------------------------------------------------------------------------static JSClass ds_Class = {    DS_CLASS_NAME_UI,    JSCLASS_HAS_PRIVATE,    JS_PropertyStub,  JS_PropertyStub,  ds_getProperty, 	ds_setProperty,    JS_EnumerateStub, JS_ResolveStub,   JS_ConvertStub,     ds_finalize,    JSCLASS_NO_OPTIONAL_MEMBERS};// --------------------------------------------------------------------------------DUWindow *ds_Window_GetPrivate(JSContext *cx, JSObject *obj, jsval *argv){	return (DUWindow*) JS_GetInstancePrivate(cx, obj, &ds_Class, argv );} // --------------------------------------------------------------------------------static JSBoolds_Show(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval){    DUWindow 	*uwindow;			uwindow = ds_Window_GetPrivate(cx, obj, argv);	if (! uwindow)		return JS_FALSE;			uwindow->Show();		return JS_TRUE;}// --------------------------------------------------------------------------------static JSBoolds_Hide(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval){    DUWindow 	*uwindow;			uwindow = ds_Window_GetPrivate(cx, obj, argv);	if (! uwindow)		return JS_FALSE;			uwindow->Hide();		return JS_TRUE;}// --------------------------------------------------------------------------------// method o.play( pitchNum, velocityNum )static JSBoolds_Select(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval * /*rval*/ ){    DUWindow 	*uwindow;			uwindow = ds_Window_GetPrivate(cx, obj, argv);	if (! uwindow)		return JS_FALSE;			uwindow->ShowSelect();		return JS_TRUE;}// --------------------------------------------------------------------------------// Window( left, top, width, height, windowClass, windowAttributes )// !!@ Need Rect here.//static JSBoolds_Constructor(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval){    DUWindow 	*uwindow;    JSBool ok;	WindowClass			windowClass = kDocumentWindowClass;	WindowAttributes	attributes = kWindowStandardDocumentAttributes;	Rect				bounds;	int32				a[6];	int					n;		/* NotePlayer called as function 	If called with new, replace with new NotePlayer object	*/    if (!(cx->fp->flags & JSFRAME_CONSTRUCTING))     {		obj = js_NewObject(cx, &ds_Class, NULL, NULL);		if (!obj)		    return JS_FALSE;		*rval = OBJECT_TO_JSVAL(obj);    }        a[0] = 100;    a[1] = 100;    a[2] = 200;    a[3] = 100;    a[4] = windowClass;    a[5] = attributes;        n = argc;    if (n > 6)    	n = 6;    for (int i = 0; i < n; i++)    {	    if (!JS_ValueToInt32(cx, argv[i], &a[i]))		    return JS_FALSE;    }    	windowClass = a[4];  	attributes = a[5];  	bounds.left = (short) a[0];  	bounds.top = (short) a[1];  	bounds.right = bounds.left + (short)a[2];  	bounds.bottom = bounds.top + (short)a[3];  	    uwindow = new DUWindow( obj, windowClass, attributes, bounds );    if (! uwindow)    	return JS_FALSE;        ok = JS_SetPrivate(cx, obj, uwindow);        return ok;}// --------------------------------------------------------------------------------static voidds_finalize(JSContext *cx, JSObject *obj){    DUWindow 	*uwindow;    uwindow = (DUWindow *) JS_GetPrivate(cx, obj);    if (!uwindow)		return;	// !!@ Need to dissconnet window on shutdown	delete uwindow;}// --------------------------------------------------------------------------------static JSBoolds_accessProperty(JSContext *cx, JSBool doSet, JSObject *obj, jsval id, jsval *vp){    JSBool 			ok = JS_FALSE;    jsint 			slot;	int32			num;	Str255			title;    DUWindow 		*ucontrol;	// !!@ why return ok here??    if (!JSVAL_IS_INT(id))		return JS_TRUE;		    slot = JSVAL_TO_INT(id);		    JS_LOCK_OBJ(cx, obj);        ucontrol = (DUWindow *) JS_GetPrivate(cx, obj);	if (! ucontrol)		goto exit;		    switch (slot)    {    	case DS_VISIBLE_PROP:    	{    		if (doSet)    		{	    		if (!JS_ValueToInt32(cx, *vp, &num))		    		goto exit;	    		ucontrol->SetVisible(num != 0);    		}    		else    		{    			*vp = BOOLEAN_TO_JSVAL(ucontrol->IsVisible());    		}    		break;    	}    	case DS_ENABLED_PROP:    	{    		if (doSet)    		{	    		if (!JS_ValueToInt32(cx, *vp, &num))		    		goto exit;	    		ucontrol->SetEnabled(num != 0);    		}    		else    		{    			*vp = BOOLEAN_TO_JSVAL(ucontrol->IsEnabled());    		}    		break;    	}    	case DS_TITLE_PROP:    	{    		if (doSet)    		{	    		ds_ConvertJSValueToStringPtr( cx, *vp, title );	    		ucontrol->SetDescriptor( title );    		}    		else    		{    			ucontrol->GetDescriptor(title);    			ds_ConvertStringPtrToJSValue(cx, title, vp);    		}    		break;    	}    }    ok = JS_TRUE;exit:;    JS_UNLOCK_OBJ(cx, obj);    return ok;}// --------------------------------------------------------------------------------static JSBoolds_getProperty(JSContext *cx, JSObject *obj, jsval id, jsval *vp){	return ds_accessProperty( cx, FALSE/*doSet*/, obj, id, vp );}// --------------------------------------------------------------------------------static JSBoolds_setProperty(JSContext *cx, JSObject *obj, jsval id, jsval *vp){	return ds_accessProperty( cx, TRUE/*doSet*/, obj, id, vp );}// --------------------------------------------------------------------------------JSObject *ds_Window_InitClass(JSContext *cx, JSObject *obj){    JSObject *proto;    proto = JS_InitClass(cx, obj, NULL, &ds_Class, ds_Constructor, 0,			 ds_props, ds_methods,			 NULL /* static_props*/, NULL /* static_method*/);    return proto;}// --------------------------------------------------------------------------------// --------------------------------------------------------------------------------