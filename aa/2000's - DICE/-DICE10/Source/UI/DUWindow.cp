/* Bridge from scripting world to LWindow object.Disable close for permanent windows.2003.04.04 	jht		Created.*/#include "DUWindow.h"#include "dicejs.h"#include <UDesktop.h>// --------------------------------------------------------------------------------DUWindow::DUWindow( 	void *				wrapperObj,	WindowClass			inWindowClass,	WindowAttributes	inAttributes,	const Rect&			inBounds)	: DxSurface(wrapperObj),		LWindow( inWindowClass, inAttributes, inBounds, LCommander::GetDefaultCommander()){	this->gworldPtr = this->GetMacPort();}// --------------------------------------------------------------------------------DUWindow::DUWindow(LStream *inStream)	: LWindow(inStream){}// --------------------------------------------------------------------------------void DUWindow::FinishCreateSelf(){	int num;		num = 1;}// --------------------------------------------------------------------------------DUWindow::~DUWindow(){}// --------------------------------------------------------------------------------void DUWindow::ShowSelect(){	UDesktop::ShowDeskWindow( this );	UDesktop::SelectDeskWindow( this );}		// --------------------------------------------------------------------------------void DUWindow::AttemptClose(){	::HideWindow( this->GetMacWindow() );}// --------------------------------------------------------------------------------void DUWindow::DoClose(){	::HideWindow( this->GetMacWindow() );}// --------------------------------------------------------------------------------void DUWindow::Process( ){	}// --------------------------------------------------------------------------------Boolean DUWindow::GetProp( DxPropID propId, DxPropType propType, void **outResult ){	return DxSurface::GetProp(propId, propType, outResult);}// --------------------------------------------------------------------------------Boolean DUWindow::SetProp( DxPropID propId, DxPropType propType, void *outResult ){	return FALSE;}// --------------------------------------------------------------------------------void DUWindow::ListenToMessage(MessageT inMessage, void *ioParam){	int		num;		num = 1;}// --------------------------------------------------------------------------------// --------------------------------------------------------------------------------