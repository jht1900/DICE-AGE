// --------------------------------------------------------------------------------//// Video Source Input//// 2005.02.21 	jht		Created.//// Copyright (c) 2005 John Henry Thompson. All rights reserved.// --------------------------------------------------------------------------------#include "DxCamera_js.h"#include "DxCamera.h"#include "DxGeneric_js.h"#include "jscntxt.h"#include "jslock.h"#include "dicejs.h"// --------------------------------------------------------------------------------#define DS_CLASS_NAME "Camera"#define DS_TYPE DxCamera// --------------------------------------------------------------------------------static JSBoolds_getProperty(JSContext *cx, JSObject *obj, jsval id, jsval *vp);static JSBoolds_setProperty(JSContext *cx, JSObject *obj, jsval id, jsval *vp);// --------------------------------------------------------------------------------static JSBoolds_videoSettings(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval);// --------------------------------------------------------------------------------static JSFunctionSpec ds_methods[] = {    {"process",            ds_Generic_process,            0,0,0},    {0,0,0,0,0}};enum ds_tinyid {    DS_PROP_output,    DS_PROP_inputDeviceNum,    DS_XXX_PROP};// --------------------------------------------------------------------------------static JSPropertySpec ds_props[] = {    {"output",				DS_PROP_output,		JSPROP_ENUMERATE|JSPROP_PERMANENT,0,0},    {"inputDeviceNum",		DS_PROP_inputDeviceNum,		JSPROP_ENUMERATE|JSPROP_PERMANENT,0,0},    {0,0,0,0,0}};// --------------------------------------------------------------------------------static JSClass ds_Class = {    DS_CLASS_NAME,    JSCLASS_HAS_PRIVATE,    JS_PropertyStub,  JS_PropertyStub,  ds_getProperty, 	ds_setProperty,    JS_EnumerateStub, JS_ResolveStub,   JS_ConvertStub,     ds_GenericFinalize,    JSCLASS_NO_OPTIONAL_MEMBERS};// --------------------------------------------------------------------------------static DS_TYPE *ds_DxCamera_GetPrivate(JSContext *cx, JSObject *obj, jsval *argv){	return (DS_TYPE*) JS_GetInstancePrivate(cx, obj, &ds_Class, argv );}// --------------------------------------------------------------------------------static JSBoolds_videoSettings(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval){    DS_TYPE 	*ucontrol;	ucontrol =  ds_DxCamera_GetPrivate(cx, obj, argv);	if (! ucontrol)		return JS_FALSE;			ucontrol->VideoSettings();		return JS_TRUE;}// !!@ For new simple way to deal with only single access to camera// will need more logic to deal with multiple active camerasstatic DS_TYPE	*lastCam;// --------------------------------------------------------------------------------// Camera()// cam.output// cam.inputDeviceNum//static JSBoolds_Constructor(JSContext *cx, JSObject *obj, uintN argc, jsval *argv, jsval *rval){    JSBool 				ok;	//int32				width = 640, height = 480;	//int32				inputNum = 1;	DS_TYPE			*ucontrol;		    if (!(cx->fp->flags & JSFRAME_CONSTRUCTING))     {		obj = js_NewObject(cx, &ds_Class, NULL, NULL);		if (!obj)		    return JS_FALSE;		*rval = OBJECT_TO_JSVAL(obj);    }        //ok = JS_ConvertArguments(cx, argc, argv, "/ii", &width, &height);    //if (! ok)    //	goto exit;    // Remember and share one camera    // !!@ Will need new logic to deal with multiple cameras    if (lastCam)    {    	    	lastCam->AddRef();    	ucontrol = lastCam;    }    else    {	    //ucontrol = new DxCamera( obj, width, height );	    ucontrol = new DxCamera( obj );	    if (! ucontrol)	    {	    	ok = JS_FALSE;	    	goto exit;	    }	    lastCam = ucontrol;	    lastCam->AddRef();    }        ok = JS_SetPrivate(cx, obj, ucontrol);  exit:;    return ok;}// --------------------------------------------------------------------------------static voidds_finalize(JSContext *cx, JSObject *obj){    DS_TYPE 	*ucontrol;    ucontrol = (DS_TYPE *) JS_GetPrivate(cx, obj);    if (!ucontrol)		return;        ucontrol->ReleaseRef();	//delete ucontrol;}// --------------------------------------------------------------------------------static JSBoolds_accessProperty(JSContext *cx, JSBool doSet, JSObject *obj, jsval id, jsval *vp){    JSBool 			ok = JS_FALSE;    jsint 			slot;	int32			num;    DS_TYPE 	*ucontrol;	// !!@ why return ok here??    if (!JSVAL_IS_INT(id))		return JS_TRUE;		    slot = JSVAL_TO_INT(id);		    JS_LOCK_OBJ(cx, obj);    	ucontrol = (DS_TYPE*) JS_GetPrivate(cx, obj);	if (! ucontrol)		goto exit;		    switch (slot)    {   	case DS_PROP_output:    	{    		if (doSet)    		{    			GWorldPtr	newGWorldPtr;    			    			newGWorldPtr = (GWorldPtr)ds_GenericGetProp( cx, *vp,    												kDxProp_value, kDxType_CGrafPortPtr);    						ucontrol->SetGWorldPtr(newGWorldPtr );    		}    		else    		{    		}    		break;    	}    	case DS_PROP_inputDeviceNum:    	{    		if (doSet)    		{	    		if (!JS_ValueToInt32(cx, *vp, &num))		    		goto exit;	    		ucontrol->SetInputDeviceNum(num );    		}    		else    		{    			ok = JS_NewNumberValue(cx, ucontrol->GetInputDeviceNum(), vp);    		}    		break;    	}    }    ok = JS_TRUE;exit:;    JS_UNLOCK_OBJ(cx, obj);    return ok;}// --------------------------------------------------------------------------------static JSBoolds_getProperty(JSContext *cx, JSObject *obj, jsval id, jsval *vp){	return ds_accessProperty( cx, FALSE/*doSet*/, obj, id, vp );}// --------------------------------------------------------------------------------static JSBoolds_setProperty(JSContext *cx, JSObject *obj, jsval id, jsval *vp){	return ds_accessProperty( cx, TRUE/*doSet*/, obj, id, vp );}// --------------------------------------------------------------------------------JSObject *ds_Camera_InitClass(JSContext *cx, JSObject *obj){    JSObject *proto;    proto = JS_InitClass(cx, obj, NULL, &ds_Class, ds_Constructor, 0,			 ds_props, ds_methods,			 NULL /* static_props*/, NULL /* static_method*/);    return proto;}// --------------------------------------------------------------------------------// --------------------------------------------------------------------------------