/*	HyperXCmd.h  Definitions for calling all standard 	HyperCard callback routines from C.	©Apple Computer, Inc. 1987	All Rights Reserved.	See CFlash.C for an example of how to include this module in your 	C program.*/#define SetUpA4() asm { move.l a4,-(sp) \						move.l a0,a4 }						#define RestoreA4() asm { move.l (sp)+,a4 }typedef struct XCmdBlock {	short	paramCount;         Handle  params[16];    Handle  returnValue;          Boolean	passFlag;           char *	entryPoint;    /* to call back to HyperCard */    short	request;      short	result;      long	inArgs[8];    long	outArgs[4];   } XCmdBlock, *XCmdBlockPtr;   typedef struct Str31 {	char	guts[32];	} Str31, *Str31Ptr;  /*result codes */#define	xresSucc 		0#define	xresFail 		1 #define	xresNotImp 		2     /* request codes */#define	xreqSendCardMessage		1 #define	xreqEvalExpr			2 #define	xreqStringLength		3 #define	xreqStringMatch			4 #define	xreqZeroBytes         	6 #define	xreqPasToZero			7 #define	xreqZeroToPas			8 #define	xreqStrToLong			9 #define	xreqStrToNum			10 #define	xreqStrToBool			11 #define	xreqStrToExt			12 #define	xreqLongToStr			13 #define	xreqNumToStr			14 #define	xreqNumToHex			15 #define	xreqBoolToStr			16 #define	xreqExtToStr			17 #define	xreqGetGlobal			18 #define	xreqSetGlobal			19 #define	xreqGetFieldByName		20 #define	xreqGetFieldByNum		21 #define	xreqGetFieldByID		22 #define	xreqSetFieldByName		23 #define	xreqSetFieldByNum		24 #define	xreqSetFieldByID		25 #define	xreqStringEqual       	26 #define	xreqReturnToPas       	27 #define	xreqScanToReturn      	28 #define	xreqScanToZero        	39   /* was suppose to be 29!  Oops! *//* Forward definitions of glue routines.  Main program 	must include XCmdGlue.inc.c.  See XCmdGlue.inc.c for 	documentation of each routine.  */	typedef void (*MyProcPtr) ();pascal void SendCardMessage(XCmdBlockPtr, StringPtr);pascal Handle EvalExpr(XCmdBlockPtr, StringPtr);pascal long StringLength(XCmdBlockPtr, StringPtr);pascal Ptr StringMatch(XCmdBlockPtr, StringPtr, Ptr);pascal void ZeroBytes(XCmdBlockPtr, Ptr, long);pascal Handle PasToZero(XCmdBlockPtr, StringPtr);pascal void ZeroToPas(XCmdBlockPtr, char *, StringPtr);pascal long StrToLong(XCmdBlockPtr, Str31 *);pascal long StrToNum(XCmdBlockPtr, Str31 *);pascal Boolean StrToBool(XCmdBlockPtr, Str31 *);pascal void StrToExt(XCmdBlockPtr, Str31 *, double */*-extended-*/);pascal void LongToStr(XCmdBlockPtr, long, Str31 *);pascal void NumToStr(XCmdBlockPtr, long, Str31 *);pascal void NumToHex(XCmdBlockPtr, long, short, Str31 *);pascal void BoolToStr(XCmdBlockPtr, Boolean, Str31 *);pascal void ExtToStr(XCmdBlockPtr,double */*-extended-*/, Str31 *);pascal Handle GetGlobal(XCmdBlockPtr, StringPtr);pascal void SetGlobal(XCmdBlockPtr, StringPtr, Handle);pascal Handle GetFieldByName(XCmdBlockPtr, Boolean, StringPtr);pascal Handle GetFieldByNum(XCmdBlockPtr, Boolean, short);pascal Handle GetFieldByID(XCmdBlockPtr, Boolean, short);pascal void SetFieldByName(XCmdBlockPtr, Boolean, StringPtr, Handle);pascal void SetFieldByNum(XCmdBlockPtr, Boolean, short, Handle);pascal void SetFieldByID(XCmdBlockPtr, Boolean, short, Handle);pascal Boolean StringEqual(XCmdBlockPtr, Str31 *, Str31 *);pascal void ReturnToPas(XCmdBlockPtr, Ptr, StringPtr);pascal void ScanToReturn(XCmdBlockPtr, Ptr *);pascal void ScanToZero(XCmdBlockPtr, Ptr *);